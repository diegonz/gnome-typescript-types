declare function getWindowDimmer(actor: any): any;
declare const Clutter: any;
declare const Gio: any;
declare const GLib: any;
declare const GObject: any;
declare const Meta: any;
declare const Shell: any;
declare const St: any;
declare const AltTab: any;
declare const AppFavorites: any;
declare const Dialog: any;
declare const WorkspaceSwitcherPopup: any;
declare const InhibitShortcutsDialog: any;
declare const Main: any;
declare const ModalDialog: any;
declare const WindowMenu: any;
declare const PadOsd: any;
declare const EdgeDragAction: any;
declare const CloseDialog: any;
declare const SwitchMonitor: any;
declare const IBusManager: any;
declare const WorkspaceAnimation: any;
declare const loadInterfaceXML: any;
declare var SHELL_KEYBINDINGS_SCHEMA: string;
declare var MINIMIZE_WINDOW_ANIMATION_TIME: number;
declare var MINIMIZE_WINDOW_ANIMATION_MODE: any;
declare var SHOW_WINDOW_ANIMATION_TIME: number;
declare var DIALOG_SHOW_WINDOW_ANIMATION_TIME: number;
declare var DESTROY_WINDOW_ANIMATION_TIME: number;
declare var DIALOG_DESTROY_WINDOW_ANIMATION_TIME: number;
declare var WINDOW_ANIMATION_TIME: number;
declare var SCROLL_TIMEOUT_TIME: number;
declare var DIM_BRIGHTNESS: number;
declare var DIM_TIME: number;
declare var UNDIM_TIME: number;
declare var APP_MOTION_THRESHOLD: number;
declare var ONE_SECOND: number;
declare var MIN_NUM_WORKSPACES: number;
declare const GSD_WACOM_BUS_NAME: "org.gnome.SettingsDaemon.Wacom";
declare const GSD_WACOM_OBJECT_PATH: "/org/gnome/SettingsDaemon/Wacom";
declare const GsdWacomIface: any;
declare const GsdWacomProxy: any;
declare const WINDOW_DIMMER_EFFECT_NAME: "gnome-shell-window-dimmer";
declare var DisplayChangeDialog: any;
declare var WindowDimmer: any;
declare var LAST_WINDOW_GRACE_TIME: number;
declare var WorkspaceTracker: {
    new (wm: any): {
        _wm: any;
        _workspaces: any[];
        _checkWorkspacesId: number;
        _pauseWorkspaceCheck: boolean;
        _workspaceSettings: any;
        blockUpdates(): void;
        unblockUpdates(): void;
        _checkWorkspaces(): boolean;
        keepWorkspaceAlive(workspace: any, duration: any): void;
        _windowRemoved(workspace: any, window: any): void;
        _windowLeftMonitor(metaDisplay: any, monitorIndex: any, _metaWin: any): void;
        _windowEnteredMonitor(metaDisplay: any, monitorIndex: any, _metaWin: any): void;
        _queueCheckWorkspaces(): void;
        _nWorkspacesChanged(): boolean;
    };
};
declare var TilePreview: any;
declare var AppSwitchAction: any;
declare var ResizePopup: any;
declare var WindowManager: {
    new (): {
        _shellwm: any;
        _minimizing: Set<any>;
        _unminimizing: Set<any>;
        _mapping: Set<any>;
        _resizing: Set<any>;
        _resizePending: Set<any>;
        _destroying: Set<any>;
        _dimmedWindows: any[];
        _skippedActors: Set<any>;
        _allowedKeybindings: {};
        _isWorkspacePrepended: boolean;
        _canScroll: boolean;
        _workspaceSwitcherPopup: any;
        _tilePreview: any;
        _gsdWacomProxy: any;
        _windowMenuManager: any;
        _workspaceTracker: {
            _wm: any;
            _workspaces: any[];
            _checkWorkspacesId: number;
            _pauseWorkspaceCheck: boolean;
            _workspaceSettings: any;
            blockUpdates(): void;
            unblockUpdates(): void;
            _checkWorkspaces(): boolean;
            keepWorkspaceAlive(workspace: any, duration: any): void;
            _windowRemoved(workspace: any, window: any): void;
            _windowLeftMonitor(metaDisplay: any, monitorIndex: any, _metaWin: any): void;
            _windowEnteredMonitor(metaDisplay: any, monitorIndex: any, _metaWin: any): void;
            _queueCheckWorkspaces(): void;
            _nWorkspacesChanged(): boolean;
        };
        _workspaceAnimation: any;
        _startX11Services(task: any): Promise<void>;
        _stopX11Services(cancellable: any): Promise<void>;
        _showPadOsd(display: any, device: any, settings: any, imagePath: any, editionMode: any, monitorIndex: any): any;
        _currentPadOsd: any;
        _lookupIndex(windows: any, metaWindow: any): number;
        _switchApp(): void;
        insertWorkspace(pos: any): void;
        _blockAnimations: boolean;
        keepWorkspaceAlive(workspace: any, duration: any): void;
        skipNextEffect(actor: any): void;
        setCustomKeybindingHandler(name: any, modes: any, handler: any): void;
        addKeybinding(name: any, settings: any, flags: any, modes: any, handler: any): any;
        removeKeybinding(name: any): void;
        allowKeybinding(name: any, modes: any): void;
        _shouldAnimate(): boolean;
        _shouldAnimateActor(actor: any, types: any): any;
        _minimizeWindow(shellwm: any, actor: any): void;
        _minimizeWindowDone(shellwm: any, actor: any): void;
        _unminimizeWindow(shellwm: any, actor: any): void;
        _unminimizeWindowDone(shellwm: any, actor: any): void;
        _sizeChangeWindow(shellwm: any, actor: any, whichChange: any, oldFrameRect: any, _oldBufferRect: any): void;
        _prepareAnimationInfo(shellwm: any, actor: any, oldFrameRect: any, _change: any): void;
        _sizeChangedWindow(shellwm: any, actor: any): void;
        _clearAnimationInfo(actor: any): boolean;
        _sizeChangeWindowDone(shellwm: any, actor: any): void;
        _checkDimming(window: any): void;
        _dimWindow(window: any): void;
        _undimWindow(window: any): void;
        _waitForOverviewToHide(): Promise<any>;
        _mapWindow(shellwm: any, actor: any): Promise<void>;
        _mapWindowDone(shellwm: any, actor: any): void;
        _destroyWindow(shellwm: any, actor: any): void;
        _destroyWindowDone(shellwm: any, actor: any): void;
        _filterKeybinding(shellwm: any, binding: any): boolean;
        _switchWorkspace(shellwm: any, from: any, to: any, direction: any): void;
        _switchInProgress: boolean;
        _switchWorkspaceDone(): void;
        _showTilePreview(shellwm: any, window: any, tileRect: any, monitorIndex: any): void;
        _hideTilePreview(): void;
        _showWindowMenu(shellwm: any, window: any, menu: any, rect: any): void;
        _startSwitcher(display: any, window: any, binding: any): void;
        _startA11ySwitcher(display: any, window: any, binding: any): void;
        _allowFavoriteShortcuts(): any;
        _switchToApplication(display: any, window: any, binding: any): void;
        _toggleAppMenu(): void;
        _toggleCalendar(): void;
        _showWorkspaceSwitcher(display: any, window: any, binding: any): void;
        actionMoveWorkspace(workspace: any): void;
        actionMoveWindow(window: any, workspace: any): void;
        handleWorkspaceScroll(event: any): any;
        _confirmDisplayChange(): void;
        _createCloseDialog(shellwm: any, window: any): any;
        _createInhibitShortcutsDialog(shellwm: any, window: any): any;
        _showResizePopup(display: any, show: any, rect: any, displayW: any, displayH: any): void;
        _resizePopup: any;
    };
};
//# sourceMappingURL=windowManager.d.ts.map