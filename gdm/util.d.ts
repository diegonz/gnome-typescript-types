declare function fadeInActor(actor: any): any;
declare function fadeOutActor(actor: any): any;
declare function cloneAndFadeOutActor(actor: any): any;
declare const Clutter: any;
declare const Gdm: any;
declare const Gio: any;
declare const GLib: any;
declare const Signals: any;
declare const Batch: any;
declare const OVirt: any;
declare const Vmware: any;
declare const Main: any;
declare const loadInterfaceXML: any;
declare const Params: any;
declare const SmartcardManager: any;
declare const FprintManagerIface: any;
declare const FprintManagerProxy: any;
declare const FprintDeviceIface: any;
declare const FprintDeviceProxy: any;
declare var PASSWORD_SERVICE_NAME: string;
declare var FINGERPRINT_SERVICE_NAME: string;
declare var SMARTCARD_SERVICE_NAME: string;
declare var FADE_ANIMATION_TIME: number;
declare var CLONE_FADE_ANIMATION_TIME: number;
declare var LOGIN_SCREEN_SCHEMA: string;
declare var PASSWORD_AUTHENTICATION_KEY: string;
declare var FINGERPRINT_AUTHENTICATION_KEY: string;
declare var SMARTCARD_AUTHENTICATION_KEY: string;
declare var BANNER_MESSAGE_KEY: string;
declare var BANNER_MESSAGE_TEXT_KEY: string;
declare var ALLOWED_FAILURES_KEY: string;
declare var LOGO_KEY: string;
declare var DISABLE_USER_LIST_KEY: string;
declare var USER_READ_TIME: number;
declare const FINGERPRINT_ERROR_TIMEOUT_WAIT: 15;
declare namespace MessageType {
    const NONE: number;
    const HINT: number;
    const INFO: number;
    const ERROR: number;
}
declare namespace FingerprintReaderType {
    const NONE_1: number;
    export { NONE_1 as NONE };
    export const PRESS: number;
    export const SWIPE: number;
}
declare var ShellUserVerifier: {
    new (client: any, params: any): {
        _reauthOnly: any;
        _client: any;
        _defaultService: string;
        _preemptingService: any;
        _settings: any;
        _fprintManager: any;
        _smartcardManager: any;
        smartcardDetected: boolean;
        _messageQueue: any[];
        _messageQueueTimeoutId: number;
        reauthenticating: boolean;
        _failCounter: number;
        _unavailableServices: Set<any>;
        _credentialManagers: {};
        readonly hasPendingMessages: boolean;
        readonly allowedFailures: any;
        readonly currentMessage: any;
        begin(userName: any, hold: any): void;
        _cancellable: any;
        _hold: any;
        _userName: any;
        cancel(): void;
        _clearUserVerifier(): void;
        _userVerifier: any;
        _userVerifierChoiceList: any;
        clear(): void;
        destroy(): void;
        selectChoice(serviceName: any, key: any): void;
        answerQuery(serviceName: any, answer: any): Promise<void>;
        _getIntervalForMessage(message: any): number;
        finishMessageQueue(): void;
        increaseCurrentMessageTimeout(interval: any): void;
        _currentMessageExtraInterval: any;
        _serviceHasPendingMessages(serviceName: any): boolean;
        _filterServiceMessages(serviceName: any, messageType: any): void;
        _queueMessageTimeout(): void;
        _queueMessage(serviceName: any, message: any, messageType: any): void;
        _queuePriorityMessage(serviceName: any, message: any, messageType: any): void;
        _clearMessageQueue(): void;
        _checkForFingerprintReader(): Promise<void>;
        _fingerprintReaderType: number;
        _onCredentialManagerAuthenticated(credentialManager: any, _token: any): void;
        _checkForSmartcard(): void;
        _reportInitError(where: any, error: any, serviceName: any): void;
        _openReauthenticationChannel(userName: any): Promise<void>;
        _getUserVerifier(): Promise<void>;
        _connectSignals(): void;
        _disconnectSignals(): void;
        _getForegroundService(): any;
        serviceIsForeground(serviceName: any): boolean;
        serviceIsDefault(serviceName: any): boolean;
        serviceIsFingerprint(serviceName: any): boolean;
        _updateDefaultService(): void;
        _startService(serviceName: any): Promise<void>;
        _beginVerification(): void;
        _onChoiceListQuery(client: any, serviceName: any, promptMessage: any, list: any): void;
        _onInfo(client: any, serviceName: any, info: any): void;
        _onProblem(client: any, serviceName: any, problem: any): void;
        _fingerprintFailedId: any;
        _onInfoQuery(client: any, serviceName: any, question: any): void;
        _onSecretInfoQuery(client: any, serviceName: any, secretQuestion: any): void;
        _onReset(): void;
        _onVerificationComplete(): void;
        _cancelAndReset(): void;
        _retry(serviceName: any): void;
        _canRetry(): any;
        _verificationFailed(serviceName: any, shouldRetry: any): Promise<void>;
        _handlePendingMessages(): Promise<any>;
        _onServiceUnavailable(_client: any, serviceName: any, errorMessage: any): void;
        _onConversationStopped(client: any, serviceName: any): void;
    };
};
//# sourceMappingURL=util.d.ts.map